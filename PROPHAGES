"""
Automatic & scalable prophage detection meta-tool
Exploits two tools for prophage detection (VirSorter & Phispy)
and performs decontamination of bacterial DNA (CheckV).

Primary detections are collapsed (union of detections) and analyzed by CheckV.
Based on assigned completeness and confidence prophages can be filtered,
accordingly to subsequent analyses.

version: 0.1
date: 05.10.2022
authors: Janusz Koszucki, Rafal Mostowy
"""


from pathlib import Path
from datetime import datetime
from scripts.utils import bcolors, process_input

configfile: 'config.yml'

# paths & params
GENBANK_FILE = config['GENBANK_FILE']
OUTPUT_DIR = config['OUTPUT_DIR']

PROPHAGES_DIR = Path(OUTPUT_DIR)
PRIMARY_EXTEND = config['PRIMARY_EXTEND']

SETUP_TOOLS_DIR = config['SETUP_TOOLS_DIR']
PVOGS_DB = Path(SETUP_TOOLS_DIR, 'pVOGs.hmm')
VIRSORTER_TOOL = Path(SETUP_TOOLS_DIR, 'virsorter_tool', 'VirSorter', 'wrapper_phage_contigs_sorter_iPlant.pl')
VIRSORTER_DB = Path(SETUP_TOOLS_DIR, 'virsorter_tool', 'virsorterDB_v2')
CHECKV_DB = Path(SETUP_TOOLS_DIR, 'checkvDB')

# intermediate folders
PROCESS_INPUT_DIR = Path(PROPHAGES_DIR, '0_input')
PRIMARY_DIR = Path(PROPHAGES_DIR, '1_primary')
CHECKV_DIR = Path(PROPHAGES_DIR, '2_checkv')
PREFIX = config['PROPHAGEID_PREFIX']
FINAL_EXTEND = config['FINAL_EXTEND']


                        #############################################
                        ######## PREPROCESSING & CHECKPOINTS ########
                        #############################################

print(f"{bcolors.OKGREEN}---------------------    PROPHAGE DETECTION   ---------------------{bcolors.ENDC}")
print(f"{bcolors.OKGREEN}---------------------------    START   -----------------------\n{bcolors.ENDC}")

# curate & annotate (via PATRIC) bacterial genomes
print(f"Preprocessing... ", end='')
GENOME_FNAMES, BACTERIA_FASTA, BACTERIA_GB, metadata = process_input(GENBANK_FILE, PROCESS_INPUT_DIR)
print(f"{bcolors.OKGREEN}Done!{bcolors.ENDC}")

# check dependencies
print(f"Check dependiencies... ", end='')
if not Path(SETUP_TOOLS_DIR).exists():
    print(f"{bcolors.FAIL}Setup dependencies by running: {bcolors.ENDC}")
    print(f"{bcolors.FAIL}snakemake --use-conda --cores all --snakefile SetupTools\n{bcolors.ENDC}")
    print(f"{bcolors.FAIL}Abort!{bcolors.ENDC}")
    exit()
print(f"{bcolors.OKGREEN}Done! {bcolors.ENDC}\n")


                #############################
                ######## TARGET RULE ########
                #############################

rule target:
    input:
        Path(PRIMARY_DIR, 'raw', 'phispy.tsv'),                                           # run phispy
        expand(Path(PRIMARY_DIR, 'raw', 'virsorter', '{genome}'), genome=GENOME_FNAMES),  # run virsorter
        Path(PRIMARY_DIR, 'union_prophages.fasta'),                                       # get collased detections
        Path(CHECKV_DIR),                                                                 # checkv decontamination
        Path(PROPHAGES_DIR, 'prophages.tsv')                                              # prophages


            #####################################
            ######## PRIMARY PREDICTIONS ########
            #####################################

# run phispy
rule phispy:
    input:
        genbank=Path(BACTERIA_GB),
        PVOGS_DB=Path(PVOGS_DB)
    output: Path(PRIMARY_DIR, 'raw', 'phispy.tsv')
    conda: "envs/phispy.yml"
    threads: workflow.cores * 1.0
    shell:
        'phispy_folder=$(dirname {output})/$(basename {output} .tsv); '
        'PhiSpy.py {input.genbank} --phmms {input.PVOGS_DB} -o $phispy_folder --threads {threads} --color; '
        'mv $phispy_folder/prophage_coordinates.tsv {output}; '
        'rm -rf $phispy_folder; '


# run virsorter
rule virsorter:
    input:
        FASTA=Path(PROCESS_INPUT_DIR, 'fasta_split', '{genome}' + '.fasta'),
        VIRSORTER_TOOL=Path(VIRSORTER_TOOL),
        VIRSORTER_DB=Path(VIRSORTER_DB)
    output: directory(Path(PRIMARY_DIR, 'raw', 'virsorter', '{genome}'))
    conda: 'envs/virsorter.yml'
    threads: 8
    shell:
    ####################################################################################
    ############################### VIRSORTER IS BUGGY! ################################
    ######### A LOT OF FIXES ARE IMPLEMENTED HERE TO MAKE SURE IT IS WORKING! ##########
    ####################################################################################
    # ERROR_1: problems with gcc compilation of step 3 (VirSorter result file is empty)
    # FIX_1: use flag --no_c in virsorter run
    # ERROR_2: Step 1 failed, we stop there: either (...) not found
    # FIX_2: copy in env: lib/perl5/site_perl/5.22.0/Bio to
    # ERROR_3: Can't locate File/Which.pm in @INC:
    # FIX_3: 'cpan install File:Which; '
    # Using dimond flag speeds up search and sensitivity.
        'cpan install File:Which || true; '                                                    # fix env
        "VIRSORTER_ENV_PATH=$(echo $(conda info | grep 'active env location') | cut -c 23-); " # fix env
        'export PERL5LIB=$VIRSORTER_ENV_PATH/lib/perl5/site_perl/5.22.0; '                     # fix env
        'rm -rf {output}; '                                                                    # remove old results
        '{input.VIRSORTER_TOOL} -f {input.FASTA} '
        '--diamond --ncpu {threads} --db 1 --data-dir {input.VIRSORTER_DB} --wdir {output}; '
        'mkdir -p {output}; '                                                                  # prevent error if vrs fails


# extract primary prophages & collapse overlapping ones (union)
rule primary:
    input:
        phispy=Path(PRIMARY_DIR, 'raw', 'phispy.tsv'),
        virsorter=expand(Path(PRIMARY_DIR, 'raw', 'virsorter', '{genome}'), genome=GENOME_FNAMES),
        metadata=Path(PROCESS_INPUT_DIR, 'bacteria.tsv'),
        genbank=Path(BACTERIA_GB)
    output:
        fasta=Path(PRIMARY_DIR, 'union_prophages.fasta'),   # fasta prophages
        union=Path(PRIMARY_DIR, '3_union.tsv'),       # collapsed primary prophages
        primary= Path(PRIMARY_DIR, '2_primary.tsv'),  # primary - pretty PhiSpy & VirSorter results
        phispy=Path(PRIMARY_DIR, '1_phispy.tsv'),     # phispy results
        virsorter= Path(PRIMARY_DIR, '1_virsorter.tsv')          # virsorter results
    params: PRIMARY_EXTEND=PRIMARY_EXTEND
    log: Path(PRIMARY_DIR, 'log')
    conda: 'envs/base.yml'
    script: 'scripts/primary.py'


            ##################################################
            ######## DECONTAMINATE PRIMARY DETECTIONS ########
            ##################################################

# Run checkv - decontaminate prophages
rule checkv:
    input: Path(PRIMARY_DIR, 'union_prophages.fasta')
    output: directory(Path(CHECKV_DIR)) # prophage decontamination
    params: CHECKV_DB=CHECKV_DB
    conda: "envs/checkv.yml"
    threads: workflow.cores * 1.0
    shell:
        'checkv end_to_end {input} {output} -d {params.CHECKV_DB} -t {threads}; '


# Get final results
rule process:
    input:
        checkv_dir=Path(CHECKV_DIR),
        fasta=Path(BACTERIA_FASTA),
        metadata=Path(PROCESS_INPUT_DIR, 'bacteria.tsv')
    output:
        fasta=Path(PROPHAGES_DIR, 'prophages.fasta'), # parse results
        tsv=Path(PROPHAGES_DIR, 'prophages.tsv')
    params:
        PREFIX=PREFIX,
        FINAL_EXTEND=FINAL_EXTEND
    conda: 'envs/base.yml'
    script: 'scripts/prophages.py'
